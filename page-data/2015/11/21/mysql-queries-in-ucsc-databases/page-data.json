{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015/11/21/mysql-queries-in-ucsc-databases/","webpackCompilationHash":"e41e3842fe09747935ae","result":{"data":{"site":{"siteMetadata":{"title":"TobiasMadsen.com","author":"Tobias Madsen"}},"markdownRemark":{"id":"14d6e4d2-d520-5db4-bc47-139c9486733d","excerpt":"I recently wanted to retrieve all SNP’s from dbSNP overlapping a set of regions using UCSC’s MySQL interface.\nThis post shows you how this…","html":"<p>I recently wanted to retrieve all SNP’s from <a href=\"https://genome.ucsc.edu/cgi-bin/hgTables?db=hg38&#x26;hgta_group=varRep&#x26;hgta_track=snp142Common&#x26;hgta_table=snp142Common&#x26;hgta_doSchema=describe+table+schema\">dbSNP</a> overlapping a set of regions using <a href=\"https://genome.ucsc.edu/goldenPath/help/mysql.html\">UCSC’s MySQL interface</a>.\nThis post shows you how this can be done and how to increase the speed of queries by using UCSC’s binning scheme.</p>\n<p>First things first - we connect to the database:</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">library<span class=\"token punctuation\">(</span>dplyr<span class=\"token punctuation\">)</span>\nmy_db <span class=\"token operator\">&lt;-</span> src_mysql<span class=\"token punctuation\">(</span><span class=\"token string\">\"hg19\"</span><span class=\"token punctuation\">,</span>\n                   host <span class=\"token operator\">=</span> <span class=\"token string\">\"genome-mysql.cse.ucsc.edu\"</span><span class=\"token punctuation\">,</span> \n                   user <span class=\"token operator\">=</span> <span class=\"token string\">\"genomep\"</span><span class=\"token punctuation\">,</span> \n                   password <span class=\"token operator\">=</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span>\nsnpDbMySQL <span class=\"token operator\">&lt;-</span> tbl<span class=\"token punctuation\">(</span>my_db<span class=\"token punctuation\">,</span> <span class=\"token string\">\"snp142\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Then we try to retrieve all the SNP’s within a short region of 1kb:</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\"><span class=\"token comment\"># NOT RUN</span>\nmy_snps <span class=\"token operator\">&lt;-</span> snpDbMySQL <span class=\"token percent-operator operator\">%>%</span>\n  filter<span class=\"token punctuation\">(</span>chrom <span class=\"token operator\">==</span> <span class=\"token string\">\"chr1\"</span><span class=\"token punctuation\">)</span> <span class=\"token percent-operator operator\">%>%</span>\n  filter<span class=\"token punctuation\">(</span>chromStart <span class=\"token operator\">>=</span> <span class=\"token number\">4000000</span><span class=\"token punctuation\">)</span> <span class=\"token percent-operator operator\">%>%</span>\n  filter<span class=\"token punctuation\">(</span>chromEnd <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4001000</span><span class=\"token punctuation\">)</span> <span class=\"token percent-operator operator\">%>%</span>\n  collect</code></pre></div>\n<p>Taking some 40 seconds this is surprisingly slow. (Notice that no data is actually fetched before the <code class=\"language-text\">collect</code> command, <code class=\"language-text\">dplyr</code> is designed to be as lazy as possible with fetching data, see <code class=\"language-text\">dplyr</code>’s database <a href=\"https://cran.r-project.org/web/packages/dplyr/vignettes/databases.html\">vignette</a>.)</p>\n<p>Let’s investigate a bit and look at how the table is indexed:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mysql&gt; SHOW INDEX in hg19.snp142;\n+--------+----------+--------------+-------------+\n| Table  | Key_name | Seq_in_index | Column_name |\n+--------+----------+--------------+-------------+\n| snp142 | name     |            1 | name        |\n| snp142 | chrom    |            1 | chrom       |\n| snp142 | chrom    |            2 | bin         |\n+--------+----------+--------------+-------------+\n3 rows in set (0.00 sec)</code></pre></div>\n<p>The output of the <code class=\"language-text\">SHOW INDEX</code> MySQL command reveals that the table is indexed after <code class=\"language-text\">name</code>, <code class=\"language-text\">chrom</code> and something called <code class=\"language-text\">bin</code>.</p>\n<p>It turns out that the binning scheme was described in the original <a href=\"http://genome.cshlp.org/content/12/6/996.full\">paper</a> on the genome browser.</p>\n<p><img src=\"http://genome.cshlp.org/content/12/6/996/F7.large.jpg\" alt=\"Source: Kent, et. al. Genome Research 2002\"></p>\n<p>The bin assigned to a feature is the smallest bin the contains the entire feature. So in the figure the feature A will be assigned to bin 1, feature B to bin 4 and feature C to bin 20. SNP’s will always fall into the lowest order of bins. </p>\n<p>To calculate the bin(s) we need to consider, we can use a slightly modified version of Jim Kent’s C script and use <code class=\"language-text\">Rcpp</code>. </p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Rcpp.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> Rcpp<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> binOffsets<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">512</span><span class=\"token operator\">+</span><span class=\"token number\">64</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [[Rcpp::export]]</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">binFromRangeStandard</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> startBin <span class=\"token operator\">=</span> start<span class=\"token punctuation\">,</span> endBin <span class=\"token operator\">=</span> end<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n  startBin <span class=\"token operator\">>>=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span>\n  endBin <span class=\"token operator\">>>=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>startBin <span class=\"token operator\">==</span> endBin<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> binOffsets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> startBin<span class=\"token punctuation\">;</span>\n    startBin <span class=\"token operator\">>>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    endBin <span class=\"token operator\">>>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">library<span class=\"token punctuation\">(</span>Rcpp<span class=\"token punctuation\">)</span>\nsourceCpp<span class=\"token punctuation\">(</span><span class=\"token string\">\"UCSCBinFromRange.cpp\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>binRange <span class=\"token operator\">&lt;-</span> c<span class=\"token punctuation\">(</span>binFromRangeStandard<span class=\"token punctuation\">(</span><span class=\"token number\">4000000</span><span class=\"token punctuation\">,</span><span class=\"token number\">4000001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> binFromRangeStandard<span class=\"token punctuation\">(</span><span class=\"token number\">4001000</span><span class=\"token punctuation\">,</span><span class=\"token number\">4001001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## [1] 615 615</code></pre></div>\n<p>We see that both the start and the end coordinate falls into bin <code class=\"language-text\">615</code>.\nIt is now much faster to query for the SNP’s within the region</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">my_snps <span class=\"token operator\">&lt;-</span> snpDbMySQL <span class=\"token percent-operator operator\">%>%</span>\n  filter<span class=\"token punctuation\">(</span>chrom <span class=\"token operator\">==</span> <span class=\"token string\">\"chr1\"</span><span class=\"token punctuation\">)</span> <span class=\"token percent-operator operator\">%>%</span>\n  filter<span class=\"token punctuation\">(</span>bin <span class=\"token operator\">==</span> <span class=\"token number\">615</span><span class=\"token punctuation\">)</span> <span class=\"token percent-operator operator\">%>%</span>\n  filter<span class=\"token punctuation\">(</span>chromStart <span class=\"token operator\">>=</span> <span class=\"token number\">4000000</span><span class=\"token punctuation\">)</span> <span class=\"token percent-operator operator\">%>%</span>\n  filter<span class=\"token punctuation\">(</span>chromEnd <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4001000</span><span class=\"token punctuation\">)</span> <span class=\"token percent-operator operator\">%>%</span>\n  collect\nmy_snps <span class=\"token percent-operator operator\">%>%</span> select<span class=\"token punctuation\">(</span>bin<span class=\"token punctuation\">,</span> chrom<span class=\"token punctuation\">,</span> chromStart<span class=\"token punctuation\">,</span> chromEnd<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## Source: local data frame [54 x 4]\n## \n##      bin chrom chromStart chromEnd\n##    (dbl) (chr)      (dbl)    (dbl)\n## 1    615  chr1    4000015  4000016\n## 2    615  chr1    4000040  4000041\n## 3    615  chr1    4000080  4000081\n## 4    615  chr1    4000090  4000091\n## 5    615  chr1    4000091  4000092\n## 6    615  chr1    4000105  4000106\n## 7    615  chr1    4000110  4000111\n## 8    615  chr1    4000111  4000112\n## 9    615  chr1    4000112  4000113\n## 10   615  chr1    4000136  4000137\n## ..   ...   ...        ...      ...</code></pre></div>\n<p>And that is it.</p>","frontmatter":{"title":"MySQL queries in UCSC databases","subtitle":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"date":"2015/11/21","slug":"/mysql-queries-in-ucsc-databases/","previous":{"fields":{"slug":"/useR-talk-2015/"},"frontmatter":{"subtitle":null,"title":"UseR! Talk","date":"2015/08/11"}},"next":{"fields":{"slug":"/Significance-Evaluation-in-Factor-Graphs/"},"frontmatter":{"subtitle":null,"title":"Significance Evaluation in Factor Graphs","date":"2017/03/31"}}}}}