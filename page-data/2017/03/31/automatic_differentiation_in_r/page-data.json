{"componentChunkName":"component---src-templates-blog-post-js","path":"/2017/03/31/automatic_differentiation_in_r/","webpackCompilationHash":"026cffe2ba66268edf51","result":{"data":{"site":{"siteMetadata":{"title":"TobiasMadsen.com","author":"Tobias Madsen"}},"markdownRemark":{"id":"482aaf59-36e8-5082-9aeb-99789aed08a8","excerpt":"Automatic Differentiation (AD) specifically reverse-mode AD takes a function, \n \ndefined by a computer program and computes the gradient…","html":"<p>Automatic Differentiation (AD) specifically reverse-mode AD takes a function,\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>:</mo><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup><mo>→</mo><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">f: \\mathbb{R}^n\\rightarrow\\mathbb{R},</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span></span></span></span></span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mord rule\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mpunct\">,</span></span></span></span>\ndefined by a computer program and computes the gradient exactly (up to machine precision) and at the same time complexity as the original program.\nHere I will show how one can use the Reverse-Mode Automatic Differentiation Library provided by <a href=\"https://arxiv.org/abs/1509.07164\">Stan Math Library</a> in R. </p>\n<h4>Setting Up</h4>\n<p>The hardest part is making sure that dependencies are resolved during compilation.\nThe relevant headers are in the <code class=\"language-text\">Rcpp</code>, <code class=\"language-text\">RcppEigen</code> and <code class=\"language-text\">StanHeaders</code> packages, so first these packages must be installed:</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"r\"><pre style=\"counter-reset: linenumber 0\" class=\"language-r line-numbers\"><code class=\"language-r\"><span class=\"gatsby-highlight-code-line\">install.packages<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">(</span><span class=\"token string\">\"Rcpp\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"RcppEigen\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"StanHeaders\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>The headers must be included during compilation, to this end we set <code class=\"language-text\">PKG_CXXFLAGS</code> system variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">Sys.setenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"PKG_CXXFLAGS\"</span><span class=\"token operator\">=</span><span class=\"token string\">'-I\"YOUR_LIB_PATH/Rcpp/include\" -I\"YOUR_LIB_PATH/RcppEigen/include\" -I\"YOUR_LIB_PATH/StanHeaders/include\"'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Where <code class=\"language-text\">YOUR_LIB_PATH</code> should be replaced with the directory where R packages are installed on your system, which can be found by calling <code class=\"language-text\">.libPaths()</code>.\nNote that if you are developing a package it is enough to add the following line to the <code class=\"language-text\">DESCRIPTION</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">LinkingTo<span class=\"token operator\">:</span> Rcpp <span class=\"token punctuation\">(</span><span class=\"token operator\">>=</span> <span class=\"token number\">0.12</span><span class=\"token number\">.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> RcppEigen<span class=\"token punctuation\">,</span> StanHeaders <span class=\"token punctuation\">(</span><span class=\"token operator\">>=</span> <span class=\"token number\">2.12</span><span class=\"token number\">.0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>Reverse-Mode AD</h4>\n<p>Now we are ready to see AD in action. The following function computes the log density function of a normal distrubted variable <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>ϕ</mi><mo>(</mo><mi>y</mi><mo separator=\"true\">;</mo><mi>μ</mi><mo separator=\"true\">,</mo><mi>σ</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\log \\phi(y; \\mu, \\sigma)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mord rule\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathit\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">;</span><span class=\"mord rule\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathit\">μ</span><span class=\"mpunct\">,</span><span class=\"mord rule\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mclose\">)</span></span></span></span>, and its derivative with respect to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mo separator=\"true\">,</mo><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">y,\\mu</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mpunct\">,</span><span class=\"mord rule\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathit\">μ</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">σ</span></span></span></span>.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Rcpp.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stan/math.hpp></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> Rcpp<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [[Rcpp::export]]</span>\nNumericVector <span class=\"token function\">normLogLikAD</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> y_<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> mu_<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> sigma_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  NumericVector <span class=\"token function\">ret</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  stan<span class=\"token operator\">::</span>math<span class=\"token operator\">::</span>var y <span class=\"token operator\">=</span> y_<span class=\"token punctuation\">;</span>\n  stan<span class=\"token operator\">::</span>math<span class=\"token operator\">::</span>var mu <span class=\"token operator\">=</span> mu_<span class=\"token punctuation\">;</span>\n  stan<span class=\"token operator\">::</span>math<span class=\"token operator\">::</span>var sigma <span class=\"token operator\">=</span> sigma_<span class=\"token punctuation\">;</span>\n  stan<span class=\"token operator\">::</span>math<span class=\"token operator\">::</span>var lp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  \n  lp <span class=\"token operator\">+=</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">-</span>mu<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>sigma<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">-</span>mu<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>sigma<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sigma<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>PI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// Compute Function Value</span>\n  ret<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lp<span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// Compute Gradient</span>\n  lp<span class=\"token punctuation\">.</span><span class=\"token function\">grad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ret<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> y<span class=\"token punctuation\">.</span><span class=\"token function\">adj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ret<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mu<span class=\"token punctuation\">.</span><span class=\"token function\">adj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ret<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sigma<span class=\"token punctuation\">.</span><span class=\"token function\">adj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// Memory is allocated on a global stack</span>\n  stan<span class=\"token operator\">::</span>math<span class=\"token operator\">::</span><span class=\"token function\">recover_memory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  stan<span class=\"token operator\">::</span>math<span class=\"token operator\">::</span>ChainableStack<span class=\"token operator\">::</span>memalloc_<span class=\"token punctuation\">.</span><span class=\"token function\">free_all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The function is now callable from R.</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">normLogLikAD<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## [1] -1.737086  0.250000 -0.250000 -0.375000</code></pre></div>\n<p>Compare this with the gradient found using numerical differentiation:</p>\n<div class=\"gatsby-highlight\" data-language=\"r\"><pre class=\"language-r\"><code class=\"language-r\">library<span class=\"token punctuation\">(</span>numDeriv<span class=\"token punctuation\">)</span>\ngrad<span class=\"token punctuation\">(</span>func <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>par<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>dnorm<span class=\"token punctuation\">(</span>par<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>par<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>par<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> log<span class=\"token operator\">=</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## [1]  0.250 -0.250 -0.375</code></pre></div>\n<p>The <code class=\"language-text\">C++</code> code is mostly straightforward: Variables are declared as <code class=\"language-text\">stan::math::var</code> all other variables are treated as constants.\nTo compute the actual value of a variable we call the member-function <code class=\"language-text\">val()</code>,\nto compute the gradient of a variable <code class=\"language-text\">y</code> with respect to some variables <code class=\"language-text\">x1,x2</code> we call <code class=\"language-text\">y</code>’s member function <code class=\"language-text\">grad()</code>,\nand the partial derivative <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>y</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\partial y}{\\partial x_1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.9322159999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.377316em;vertical-align:-0.44509999999999994em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9322159999999999em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mtight\"><span class=\"mord mathit mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"></span></span></span></span></span></span></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"stretchy\" style=\"height:0.2em;\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\"top:-3.446108em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathit mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.44509999999999994em;\"></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> can be obtained by calling <code class=\"language-text\">x1</code>’s member function <code class=\"language-text\">adj()</code>.\nFinally it should be noted that <code class=\"language-text\">stan::math</code> allocates memory for variables on a global stack,\nthat means memory is not automatically freed up when the variables goes out of scope.\nThe function <code class=\"language-text\">recover_memory()</code> clears this stack and <code class=\"language-text\">ChainableStack::memalloc_.free_all()</code> frees the memory associated with it,\nboth should be called after finish computation.</p>\n<h4>References</h4>\n<p><a href=\"https://arxiv.org/abs/1509.07164\">Stan Math Library</a></p>","frontmatter":{"title":"Automatic Differentiation in R","subtitle":"Use Stan Math library to do reverse-mode automatic differentiation in R"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"date":"2017/03/31","slug":"/automatic_differentiation_in_r/","previous":{"fields":{"slug":"/Significance-Evaluation-in-Factor-Graphs/"},"frontmatter":{"subtitle":null,"title":"Significance Evaluation in Factor Graphs","date":"2017/03/31"}},"next":{"fields":{"slug":"/p_values_and_posterior_probabilities/"},"frontmatter":{"subtitle":"Given a p-value of 0.045 what is the probability that the null model is true? The answer will surprise you!","title":"P-values and Posterior Probabilities","date":"2017/04/10"}}}}}